from collections import deque

class QueueElement:
    def __init__(self, destination, source):
        self.destination = destination
        self.source = source

def solution(entrances, exits, path):
    nodes_num = len(path) + 2
    start_idx = nodes_num - 2
    end_idx = nodes_num - 1

    max_capacity = [[0]*nodes_num for _ in range(nodes_num)]
    for x_idx in range(len(path)):
        for y_idx in range(len(path)):
            max_capacity[x_idx][y_idx] = path[x_idx][y_idx]

    for idx in exits:
        max_capacity[idx][end_idx] = float('inf')

    for idx in entrances:
        max_capacity[start_idx][idx] = float('inf')

    used_capacity = [[0]*nodes_num for _ in range(nodes_num)]

    latest_path = find_new_path(used_capacity, max_capacity, start_idx, end_idx)
    while latest_path:
        flow = find_highest_flow(latest_path, used_capacity, max_capacity)
        update_capacity(flow, latest_path, used_capacity)
        latest_path = find_new_path(used_capacity, max_capacity, start_idx, end_idx)

    result = sum(used_capacity[start_idx][idx] for idx in entrances)
    return result

def update_capacity(flow, latest_path, used_capacity):
    last_idx = -1
    for index in latest_path:
        if last_idx != -1:
            used_capacity[last_idx][index] += flow
        last_idx = index

def find_highest_flow(latest_path, used_capacity, max_capacity):
    highest_capacity = float('inf')
    last_idx = -1
    for index in latest_path:
        if last_idx != -1:
            uc = used_capacity[last_idx][index]
            mc = max_capacity[last_idx][index]
            rc = used_capacity[index][last_idx]

            capacity = mc - uc - rc
            highest_capacity = min(highest_capacity, capacity)
        last_idx = index
    return highest_capacity

def find_new_path(used_capacity, max_capacity, start_idx, end_idx):
    source = [-1]*(end_idx + 1)
    queue = deque()
    queue.append(QueueElement(start_idx, start_idx))

    while queue:
        current_element = queue.popleft()
        current_idx = current_element.destination
        if source[current_idx] != -1:
            continue

        source[current_idx] = current_element.source

        for neighbour_idx in range(end_idx + 1):
            if (used_capacity[current_idx][neighbour_idx] < max_capacity[current_idx][neighbour_idx] or
                used_capacity[neighbour_idx][current_idx] < 0):
                queue.append(QueueElement(neighbour_idx, current_idx))

    result = []
    if source[end_idx] != -1:
        idx = end_idx
        while idx != start_idx:
            result.append(idx)
            idx = source[idx]
        result.append(start_idx)
    return result[::-1]
